{"version":3,"sources":["Person.js","PeopleTable.js","App.js","index.js"],"names":["Person","_ref","item","react_default","a","createElement","className","concat","century","id","name","sex","born","died","mother","father","age","children","PeopleTable","people","sortBy","onClick","map","person","src_Person","getPeople","Object","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","this","arguments","App","state","peopleCopy","target","_this","setState","prevState","sortedArray","toConsumableArray","peopleList","sort","b","localeCompare","filter","event","dataToFind","value","updatedList","toLowerCase","search","peopleModified","index","objectSpread","Math","ceil","join","length","type","placeholder","onChange","src_PeopleTable","sortByField","React","Component","ReactDOM","render","src_App_0","test","document","getElementById"],"mappings":"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","file":"static/js/main.63aa4535.chunk.js","sourcesContent":["import React from 'react';\n\nconst Person = ({ item }) => (\n  <tr className={`person--lived-in-${item.century} person-row`}>\n    <td>\n      {item.id}\n    </td>\n    <td>\n      {item.name}\n    </td>\n    <td className={item.sex === 'm'\n      ? 'person--male'\n      : 'person--female'}\n    >\n      {item.sex}\n    </td>\n    <td className={item.born < 1650 && 'born--before'}>\n      {item.born}\n    </td>\n    <td className={item.died > 1800 && 'died--after'}>\n      {item.died}\n    </td>\n    <td>\n      {item.mother}\n    </td>\n    <td>\n      {item.father}\n    </td>\n    <td className={item.age > 65 && 'long--livers'}>\n      {item.age}\n    </td>\n    <td>\n      {item.century}\n    </td>\n    <td>\n      {item.children}\n    </td>\n  </tr>\n);\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person';\n\nconst PeopleTable = ({ people, sortBy }) => (\n  <table>\n    <thead>\n      <tr>\n        <th onClick={() => sortBy('id')}>id</th>\n        <th onClick={() => sortBy('name')}>name</th>\n        <th>sex</th>\n        <th onClick={() => sortBy('born')}>born</th>\n        <th onClick={() => sortBy('died')}>died</th>\n        <th>mother</th>\n        <th>father</th>\n        <th onClick={() => sortBy('age')}>age</th>\n        <th>century</th>\n        <th>children</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {people.map(person => <Person item={person} />)}\n    </tbody>\n  </table>\n);\n\nexport default PeopleTable;\n","import React from 'react';\nimport PeopleTable from './PeopleTable';\nimport './App.css';\n\nconst peopleFromServer = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nconst getPeople = async() => {\n  const response = await fetch(peopleFromServer);\n  const people = await response.json();\n  return people;\n};\n\nclass App extends React.Component {\n  state = {\n    people: [],\n    peopleCopy: [],\n  }\n\n  async componentDidMount() {\n    const people = await getPeople();\n    const peopleModified = people.map((person, index) => ({\n      ...person,\n      id: index + 1,\n      age: person.died - person.born,\n      century: Math.ceil(person.died / 100),\n      children: people.filter(item => item.father === person.name\n        || item.mother === person.name)\n        .map(item => item.name)\n        .join(', '),\n    }));\n\n    this.setState({\n      peopleCopy: [...peopleModified],\n      people: [...peopleModified],\n    });\n  }\n\n  sortBy = (target) => {\n    this.setState((prevState) => {\n      let sortedArray;\n\n      switch (target) {\n        case 'name':\n          sortedArray = [...prevState.peopleList]\n            .sort((a, b) => a[target].localeCompare(b[target]));\n\n          break;\n\n        default: sortedArray = [...prevState.peopleList]\n          .sort((a, b) => a[target] - b[target]);\n      }\n\n      return { peopleCopy: sortedArray };\n    });\n  }\n\n  filter = (event) => {\n    const dataToFind = event.target.value;\n\n    this.setState((prevState) => {\n      let updatedList = prevState.people;\n\n      updatedList = updatedList.filter((item) => {\n        const dataToSort = item.name + item.father + item.mother;\n\n        return dataToSort.toLowerCase().search(\n          dataToFind.toLowerCase()\n        ) !== -1;\n      });\n\n      return { peopleCopy: updatedList };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>\n          Number of items:\n          {this.state.peopleCopy.length}\n        </h1>\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"find person\"\n            onChange={this.filter}\n          />\n        </form>\n        <PeopleTable people={this.state.peopleCopy} sortBy={this.sortByField} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}